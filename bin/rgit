#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "rgit"
require "main"

Main {
  mode 'init' do
    argument 'path'
    def run()
      if params["path"].given?
        path = params['path'].value
        Rgit::Repo.create(path)
        puts "Created repository at #{path}"
      end
    end
  end

  mode 'cat-file' do
    argument 'type'
    argument 'object'
    def run()
      repo = Rgit::Repo.find
      object = Rgit::Object.read(repo, Rgit::Object.find(repo, params["object"].value, type=params["type"].value))
      $stdout.write(object.serialize)
    end
  end

  mode 'hash-object' do
    option('write', 'w')
    option('type', 't') {
      required
      argument_required
    }
    argument 'file'
    def run()
      repo = params["write"].given? ? Rgit::Repo.find : nil
      data = File.read(params["file"].value)
      type = params["type"].value
      object = Rgit::Object.create(type, repo, data)
      raise "Unknown type #{type}!" if object.nil?
      puts Rgit::Object.write(object, update_repo=false)
    end
  end

  mode 'ls-tree' do
    argument 'object'
    def run
      repo = Rgit::Repo.find
      object = Rgit::Object.read(repo, Rgit::Object.find(repo, params["object"].value, type="tree"))
      object.items.each do |item|
        mode = '0' * (6 - item.mode.length) + item.mode
        item_object = Rgit::Object.read(repo, item.sha)
        puts "#{mode} #{item_object.type} #{item.sha}\t#{item.path}"
      end
    end
  end

  mode 'show-ref' do
    def run
      repo = Rgit::Repo.find

      def show_ref(refs, prefix="")
        refs.each do |k, v|
          ref_path = prefix != "" ? "#{prefix}/#{k}" : "#{k}"
          if v.is_a? String
            print "#{v} "
            print "refs/" if prefix != ""
            puts "#{ref_path}"
          else
            show_ref(v, ref_path)
          end
        end
      end

      show_ref(repo.ref_list)
    end
  end

  mode 'checkout' do
    argument 'commit'
    argument 'path'
    def run
      repo = Rgit::Repo.find
      object = Rgit::Object.read(repo, Rgit::Object.find(repo, params["commit"].value))

      # If we have a commit, read it's tree.
      object = Rgit::Object.read(repo, object.data["tree"]) if object.class == Rgit::Commit

      # Verify the directory is empty first, and create it if it doesn't exist.
      out_dir = params["path"].value
      if Dir.exists?(out_dir)
        raise "#{out_dir} is not a directory." if !File.directory?(out_dir)
        raise "#{out_dir} not empty." if !Dir.children(out_dir).empty?
      else
        Dir.mkdir(out_dir)
      end

      def tree_checkout(repo, tree, path)
        tree.items.each do |item|
          object = Rgit::Object.read(repo, item.sha)
          dest_path = File.join(path, item.path)

          case object
          when Rgit::Tree
            Dir.mkdir(dest_path)
            tree_checkout(repo, object, dest_path)
          when Rgit::Blob
            File.open(dest_path, "wb") do |f|
              f.write(object.data)
            end
          end
        end
      end

      tree_checkout(repo, object, out_dir)
    end
  end

  mode 'log' do
    argument('commit') {
      default 'HEAD'
    }
    def run
      repo = Rgit::Repo.find

      def visit_commit(repo, sha, seen)
        return if seen.key?(sha)
        seen[sha] = true

        commit = Rgit::Object.read(repo, sha)
        raise "#{sha} is not a commit, but instead an instance of #{commit.class}!" unless commit.class == Rgit::Commit

        # Display commit.
        puts "commit #{sha}"
        puts "author: #{commit.data["author"]}"
        puts
        puts "\t#{commit.message}"
        puts

        # Base case: the initial commit.
        return if commit.parents.nil?

        # Parents
        commit.parents.each do |p|
          visit_commit(repo, p, seen)
        end
      end

      visit_commit(repo, Rgit::Object.find(repo, params["commit"].value), {})
    end
  end

  mode 'version' do
    def run()
      puts "Rgit version #{Rgit::VERSION}"
    end
  end
}